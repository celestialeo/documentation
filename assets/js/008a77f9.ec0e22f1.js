"use strict";(self.webpackChunkopen_libra_core_docs=self.webpackChunkopen_libra_core_docs||[]).push([[7546],{6824:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>r,metadata:()=>a,toc:()=>c});var n=o(5893),i=o(1151);const r={},s=void 0,a={id:"misc/tool_design",title:"tool_design",description:"About Libra Tool Design",source:"@site/docs/misc/tool_design.md",sourceDirName:"misc",slug:"/misc/tool_design",permalink:"/misc/tool_design",draft:!1,unlisted:!1,editUrl:"https://github.com/0LNetworkCommunity/documentation/edit/main/docs/misc/tool_design.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Key Rotation",permalink:"/misc/key_rotation"},next:{title:"Welcome Validators",permalink:"/misc/validator_registration"}},l={},c=[{value:"About Libra Tool Design",id:"about-libra-tool-design",level:2},{value:"The Customer",id:"the-customer",level:3},{value:"Bring your own tool",id:"bring-your-own-tool",level:3},{value:"Start a new minimal Rust crate",id:"start-a-new-minimal-rust-crate",level:4}];function d(e){const t={code:"code",h2:"h2",h3:"h3",h4:"h4",p:"p",...(0,i.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h2,{id:"about-libra-tool-design",children:"About Libra Tool Design"}),"\n",(0,n.jsx)(t.p,{children:"The tools are intended to be minimalist, yet modular. Upstream vendors have sophisticated and complex tooling. This is usually unwieldy for the profile of typical 0L users."}),"\n",(0,n.jsx)(t.h3,{id:"the-customer",children:"The Customer"}),"\n",(0,n.jsx)(t.p,{children:"If you have a typical end-user use case, Carpe will likely be all you need.\nThese tools are for users which are engaged in more admin level operations on the network: configuring and querying contracts."}),"\n",(0,n.jsx)(t.p,{children:"For that user the cli tools here will like have sufficient features: query, transact, run node."}),"\n",(0,n.jsx)(t.p,{children:"Similarly if you are a Move dev, similarly the most common features are covered: testing, verifying, compiling, deploying."}),"\n",(0,n.jsx)(t.h3,{id:"bring-your-own-tool",children:"Bring your own tool"}),"\n",(0,n.jsx)(t.p,{children:"If you have needs that aren't met with these tools, all of them are also exported as libraries. Meaning: they are architected so that they are easy to extend."}),"\n",(0,n.jsx)(t.h4,{id:"start-a-new-minimal-rust-crate",children:"Start a new minimal Rust crate"}),"\n",(0,n.jsxs)(t.p,{children:["With a simple Rust project, that uses Clap as a CLI scaffold, you can import all of the CLI types, whole or in part. This means you can extend the existing methods (by creating a ",(0,n.jsx)(t.code,{children:"trait"})," extension in your own tool)."]}),"\n",(0,n.jsxs)(t.p,{children:["Additionally the most relevant vendor SDK types are re-exported by ",(0,n.jsx)(t.code,{children:"libra-types"}),". So you should be able to take advantage of much of the Move resource parsing (e.g converting account addresses from API calls to structs);"]})]})}function u(e={}){const{wrapper:t}={...(0,i.a)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},1151:(e,t,o)=>{o.d(t,{Z:()=>a,a:()=>s});var n=o(7294);const i={},r=n.createContext(i);function s(e){const t=n.useContext(r);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),n.createElement(r.Provider,{value:t},e.children)}}}]);